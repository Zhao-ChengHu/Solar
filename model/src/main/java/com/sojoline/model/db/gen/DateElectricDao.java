package com.sojoline.model.db.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sojoline.model.db.DateElectric;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATE_ELECTRIC".
*/
public class DateElectricDao extends AbstractDao<DateElectric, Void> {

    public static final String TABLENAME = "DATE_ELECTRIC";

    /**
     * Properties of entity DateElectric.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ElectricId = new Property(0, Long.class, "electricId", false, "ELECTRIC_ID");
        public final static Property Electric = new Property(1, float.class, "electric", false, "ELECTRIC");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Num = new Property(3, Integer.class, "num", false, "NUM");
    }

    private Query<DateElectric> dBElectric_ListQuery;

    public DateElectricDao(DaoConfig config) {
        super(config);
    }
    
    public DateElectricDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATE_ELECTRIC\" (" + //
                "\"ELECTRIC_ID\" INTEGER," + // 0: electricId
                "\"ELECTRIC\" REAL NOT NULL ," + // 1: electric
                "\"DATE\" TEXT," + // 2: date
                "\"NUM\" INTEGER);"); // 3: num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_ELECTRIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DateElectric entity) {
        stmt.clearBindings();
 
        Long electricId = entity.getElectricId();
        if (electricId != null) {
            stmt.bindLong(1, electricId);
        }
        stmt.bindDouble(2, entity.getElectric());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(4, num);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DateElectric entity) {
        stmt.clearBindings();
 
        Long electricId = entity.getElectricId();
        if (electricId != null) {
            stmt.bindLong(1, electricId);
        }
        stmt.bindDouble(2, entity.getElectric());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(4, num);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DateElectric readEntity(Cursor cursor, int offset) {
        DateElectric entity = new DateElectric( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // electricId
            cursor.getFloat(offset + 1), // electric
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DateElectric entity, int offset) {
        entity.setElectricId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setElectric(cursor.getFloat(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DateElectric entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DateElectric entity) {
        return null;
    }

    @Override
    public boolean hasKey(DateElectric entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "list" to-many relationship of DBElectric. */
    public List<DateElectric> _queryDBElectric_List(Long electricId) {
        synchronized (this) {
            if (dBElectric_ListQuery == null) {
                QueryBuilder<DateElectric> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ElectricId.eq(null));
                dBElectric_ListQuery = queryBuilder.build();
            }
        }
        Query<DateElectric> query = dBElectric_ListQuery.forCurrentThread();
        query.setParameter(0, electricId);
        return query.list();
    }

}
